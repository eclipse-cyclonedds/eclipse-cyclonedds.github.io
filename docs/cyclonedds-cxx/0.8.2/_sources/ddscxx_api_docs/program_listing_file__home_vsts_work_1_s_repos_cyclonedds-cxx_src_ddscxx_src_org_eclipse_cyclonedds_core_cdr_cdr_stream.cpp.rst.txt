
.. _program_listing_file__home_vsts_work_1_s_repos_cyclonedds-cxx_src_ddscxx_src_org_eclipse_cyclonedds_core_cdr_cdr_stream.cpp:

Program Listing for File cdr_stream.cpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_vsts_work_1_s_repos_cyclonedds-cxx_src_ddscxx_src_org_eclipse_cyclonedds_core_cdr_cdr_stream.cpp>` (``/home/vsts/work/1/s/repos/cyclonedds-cxx/src/ddscxx/src/org/eclipse/cyclonedds/core/cdr/cdr_stream.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   #include <cstring>
   #include <algorithm>
   #include <assert.h>
   
   #include <org/eclipse/cyclonedds/core/cdr/cdr_stream.hpp>
   
   namespace org {
   namespace eclipse {
   namespace cyclonedds {
   namespace core {
   namespace cdr {
   
   void cdr_stream::set_buffer(void* toset) {
     m_buffer = static_cast<char*>(toset);
     reset_position();
   }
   
   size_t cdr_stream::align(size_t newalignment, bool add_zeroes)
   {
     if (m_current_alignment == newalignment)
       return 0;
   
     m_current_alignment = std::min(newalignment, m_max_alignment);
   
     size_t tomove = (m_current_alignment - m_position % m_current_alignment) % m_current_alignment;
     if (tomove && add_zeroes && m_buffer) {
       auto cursor = get_cursor();
       assert(cursor);
       memset(cursor, 0, tomove);
     }
   
     m_position += tomove;
   
     return tomove;
   }
   
   }
   }
   }
   }
   }  /* namespace org / eclipse / cyclonedds / core / cdr */
