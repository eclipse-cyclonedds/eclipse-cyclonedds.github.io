
.. _program_listing_file__home_vsts_work_1_s_repos_cyclonedds-cxx_src_ddscxx_src_org_eclipse_cyclonedds_core_InstanceHandleDelegate.cpp:

Program Listing for File InstanceHandleDelegate.cpp
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_vsts_work_1_s_repos_cyclonedds-cxx_src_ddscxx_src_org_eclipse_cyclonedds_core_InstanceHandleDelegate.cpp>` (``/home/vsts/work/1/s/repos/cyclonedds-cxx/src/ddscxx/src/org/eclipse/cyclonedds/core/InstanceHandleDelegate.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   
   
   #include <org/eclipse/cyclonedds/core/InstanceHandleDelegate.hpp>
   
   #include "dds/dds.h"
   
   namespace org
   {
   namespace eclipse
   {
   namespace cyclonedds
   {
   namespace core
   {
   
   InstanceHandleDelegate::InstanceHandleDelegate() : handle_(DDS_HANDLE_NIL)
   {
       // empty
   }
   
   InstanceHandleDelegate::InstanceHandleDelegate(dds_instance_handle_t h) : handle_(h)
   {
   }
   
   InstanceHandleDelegate::InstanceHandleDelegate(const dds::core::null_type& src)
       : handle_(DDS_HANDLE_NIL)
   {
       (void)src;
   }
   
   dds_instance_handle_t
   InstanceHandleDelegate::handle() const
   {
       return handle_;
   }
   
   
   InstanceHandleDelegate&
   InstanceHandleDelegate::operator=(const dds::core::null_type& src)
   {
       (void)src;
       handle_ = DDS_HANDLE_NIL;
       return *this;
   }
   
   bool
   InstanceHandleDelegate::is_nil() const
   {
       return (handle_ == DDS_HANDLE_NIL);
   }
   
   bool
   InstanceHandleDelegate::operator==(const InstanceHandleDelegate& that) const
   {
       return (this->handle_ == that.handle_);
   }
   
   bool
   InstanceHandleDelegate::operator<(const InstanceHandleDelegate& that) const
   {
       return (this->handle_ < that.handle_);
   }
   
   bool
   InstanceHandleDelegate::operator>(const InstanceHandleDelegate& that) const
   {
       return (this->handle_ > that.handle_);
   }
   
   }
   }
   }
   }
